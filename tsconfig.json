// https://www.typescriptlang.org/tsconfig
{
  "compilerOptions": {
    "allowJs": true,
    // If you're not exporting something by default, then assume that you are.
    "allowSyntheticDefaultImports": true,
    // "baseUrl": "src",
    "checkJs": false,
    // Allows us to generate .d.ts files.
    "declaration": true,
    // Tells Typescript where to place the .d.ts files.
    // In other words, it will put them in dist/cjs/types & dist/esm/types.
    // dist will also contain a dist/index.d.ts (also occurred in Alex Eagleson tutorial).
    "declarationDir": "types",
    // We will be using Rollup to bundle are javascript files.
    // Thus we don't need Typescript to bundle the javascript files
    // for us.
    "emitDeclarationOnly": true,
    "esModuleInterop": true, // default: true
    // Typescript needs to be instructed to process JSX.
    // Convert JSX into a createElement function call.
    "jsx": "react",
    // Ensure that casing is correct in imports.
    "forceConsistentCasingInFileNames": true, // default: true
    "module": "ESNEXT", // default: "commonjs"
    // Tell Typescript what process to use to look for modules.
    "moduleResolution": "Node",
    // Tells Typescript where to output the transpiled/bundled code.
    "outDir": "dist", // Or "./dist"
    // "removeComments": true,
    "skipLibCheck": true, // default: true
    // Useful for debugging.
    "sourceMap": true,
    "strict": true, // default: true
    "target": "ESNext" // default: "es5"
  },
  "include": ["src/**/*"],
  // https://bobbyhadz.com/blog/typescript-exclude-folder-tsconfig
  // This is what create-react-library does. This may not even
  // matter since we're using "emitDeclarationOnly":true.
  // However, it is important to list exclusions in the rollup.config.mjs
  // typescript plugin's exclude property.
  "exclude": [
    "node_modules",
    "dist",
    "example",
    "**/*.test.*",
    "**/*.spec.*",
    "__tests__"
  ]
}
